{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_KEY","App","state","city","undefined","country","temperatureC","temperatureF","humidity","description","icon","sunrise","sunset","errorMessage","getPosition","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","alert","getWeather","_callee","latitude","longitude","api_call","data","regenerator_default","a","wrap","_context","prev","next","fetch","concat","sent","json","_this","setState","name","sys","Math","round","main","temp","weather","moment","unix","format","console","log","stop","rerun","then","position","coords","catch","err","message","_this2","this","timerID","setInterval","clearInterval","react_default","createElement","className","src","alt","viewBox","fill","d","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6SAKMA,EAAQ,mCAqICC,6MAlIbC,MAAQ,CACNC,UAAMC,EACNC,aAASD,EACTE,kBAAcF,EACdG,kBAAcH,EACdI,cAAUJ,EACVK,iBAAaL,EACbM,UAAMN,EACNO,aAASP,EACTQ,YAAQR,EACRS,kBAAcT,KAsBhBU,YAAc,WACZ,GAAIC,UAAUC,YACZ,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GACpCJ,UAAUC,YAAYI,mBAAmBF,EAASC,KAIpDE,MAAM,gCAKVC,iDAAa,SAAAC,EAAOC,EAAUC,GAAjB,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYC,MAAK,iDAAAC,OAAkDX,EAAlD,SAAAW,OAAkEV,EAAlE,WAAAU,OAAqFnC,EAArF,kBADjB,cACL0B,EADKK,EAAAK,KAAAL,EAAAE,KAAA,EAEQP,EAASW,OAFjB,OAELV,EAFKI,EAAAK,KAIXE,EAAKC,SAAS,CACZpC,KAAMwB,EAAKa,KACXnC,QAASsB,EAAKc,IAAIpC,QAClBC,aAAcoC,KAAKC,MAAMhB,EAAKiB,KAAKC,MACnCtC,aAAcmC,KAAKC,MAAuB,IAAjBhB,EAAKiB,KAAKC,KAAa,IAChDrC,SAAUmB,EAAKiB,KAAKpC,SACpBC,YAAakB,EAAKmB,QAAQ,GAAGrC,YAC7BC,KAAMiB,EAAKmB,QAAQ,GAAGpC,KACtBC,QAASoC,IAAOC,KAAKrB,EAAKc,IAAI9B,SAASsC,OAAO,WAC9CrC,OAAQmC,IAAOC,KAAKrB,EAAKc,IAAI7B,QAAQqC,OAAO,aAG9CC,QAAQC,IAAI,YAAaxB,GAhBd,wBAAAI,EAAAqB,SAAA7B,gEAoBb8B,MAAQ,WACNf,EAAKxB,cACJwC,KAAK,SAACC,GACLjB,EAAKhB,WAAWiC,EAASC,OAAOhC,SAAU+B,EAASC,OAAO/B,aAE3DgC,MAAM,SAACC,GACNpB,EAAKC,SAAS,CAAE1B,aAAc6C,EAAIC,gGAzDlB,IAAAC,EAAAC,KAEhBA,KAAK/C,cAEJwC,KAAK,SAACC,GACLK,EAAKtC,WAAWiC,EAASC,OAAOhC,SAAU+B,EAASC,OAAO/B,aAE3DgC,MAAM,SAACC,GACNE,EAAKrB,SAAS,CAAE1B,aAAc6C,EAAIC,YAIpCE,KAAKC,QAAUC,YACb,kBAAMH,EAAKP,SACX,oDAiDJW,cAAcH,KAAKC,0CAInB,OAAID,KAAK3D,MAAMC,KAEX8D,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,OAEbF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,cACbF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,UAAf,uBAGFF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,WACbF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBAAgBN,KAAK3D,MAAMC,KAA1C,KAAkD0D,KAAK3D,MAAMG,SAE7D4D,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBAAgBN,KAAK3D,MAAMI,aAA1C,UAEA2D,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBAAgBN,KAAK3D,MAAMK,aAA1C,UAEA0D,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBAAf,YAAwCN,KAAK3D,MAAMM,SAAnD,KAEAyD,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBAAgBN,KAAK3D,MAAMO,aAC1CwD,EAAApC,EAAAqC,cAAA,WACED,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,eAAeC,IAAG,mCAAAjC,OAAqC0B,KAAK3D,MAAMQ,KAAhD,QAA4D2D,IAAI,kBAInGJ,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBACbF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,WAAWG,QAAQ,aAChCL,EAAApC,EAAAqC,cAAA,QAAMK,KAAK,QAAQC,EAAE,4nBAEvBP,EAAApC,EAAAqC,cAAA,YAAOL,KAAK3D,MAAMS,UAGpBsD,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,gBACbF,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,WAAWG,QAAQ,aAChCL,EAAApC,EAAAqC,cAAA,QAAMK,KAAK,QAAQC,EAAE,+nBAEvBP,EAAApC,EAAAqC,cAAA,YAAOL,KAAK3D,MAAMU,WAUxBqD,EAAApC,EAAAqC,cAAA,gCA7HUO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAApC,EAAAqC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpE,WACrBA,UAAUqE,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.2f0458a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment';\n\n//please don't use my key, you can get your free key at https://openweathermap.org/appid\nconst API_KEY=\"5abd98ed849a5414b5960c496cc31a3d\";\n\nclass App extends Component {\n  state = {  \n    city: undefined,\n    country: undefined,  \n    temperatureC: undefined,\n    temperatureF: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    errorMessage: undefined,\n  }\n\n  componentDidMount() {\n      //get coordinates\n      this.getPosition()\n      //then use coordinates to get weather data\n      .then((position) => {      \n        this.getWeather(position.coords.latitude, position.coords.longitude)\n      })\n      .catch((err) => {\n        this.setState({ errorMessage: err.message });\n      });\n\n      //this part is not necessary, it is here to automatically update our weather data every 5 minutes (300000 milliseconds)\n      this.timerID = setInterval(\n        () => this.rerun(),\n        300000\n      );\n  }\n\n  //function to get coordinates\n  getPosition = () => {\n    if (navigator.geolocation) {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    }\n    else {\n      alert(\"Geolocation not available\");      \n    }\n  }\n  \n  //function to get weather if you have the coordinates\n  getWeather = async (latitude, longitude) => { \n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    \n    this.setState({\n      city: data.name,\n      country: data.sys.country,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      sunrise: moment.unix(data.sys.sunrise).format(\"hh:mm a\"),\n      sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\"),\n    })\n\n    console.log('data is: ', data)\n  }\n\n  //function to re-run getting of coordinates followed by a re-run of fetching of weather data\n  rerun = () => {\n    this.getPosition()\n    .then((position) => {      \n      this.getWeather(position.coords.latitude, position.coords.longitude)\n    })\n    .catch((err) => {\n      this.setState({ errorMessage: err.message });\n    });\n  }\n\n  //shut down auto updating if you will close this page and move on to another page in your app\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    if (this.state.city) {\n      return (\n        <div className=\"App\">\n  \n          <div className=\"header-box\">\n            <div className=\"header\">Here Comes The Sun</div>\n          </div>   \n          \n          <div className=\"weather\">\n            <div className=\"weather-item\">{this.state.city}, {this.state.country}</div>  \n    \n            <div className=\"weather-item\">{this.state.temperatureC} &deg;C</div>\n    \n            <div className=\"weather-item\">{this.state.temperatureF} &deg;F</div>\n    \n            <div className=\"weather-item\">humidity {this.state.humidity}%</div>\n    \n            <div className=\"weather-item\">{this.state.description}</div>\n            <div>\n              <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${this.state.icon}.png`} alt=\"weather icon\"/>\n            </div>\n            \n    \n            <div className=\"weather-item\">\n              <svg className=\"sun-icon\" viewBox=\"0 0 24 24\">\n                <path fill=\"black\" d=\"M3,12H7A5,5 0 0,1 12,7A5,5 0 0,1 17,12H21A1,1 0 0,1 22,13A1,1 0 0,1 21,14H3A1,1 0 0,1 2,13A1,1 0 0,1 3,12M15,12A3,3 0 0,0 12,9A3,3 0 0,0 9,12H15M12,2L14.39,5.42C13.65,5.15 12.84,5 12,5C11.16,5 10.35,5.15 9.61,5.42L12,2M3.34,7L7.5,6.65C6.9,7.16 6.36,7.78 5.94,8.5C5.5,9.24 5.25,10 5.11,10.79L3.34,7M20.65,7L18.88,10.79C18.74,10 18.47,9.23 18.05,8.5C17.63,7.78 17.1,7.15 16.5,6.64L20.65,7M12.71,16.3L15.82,19.41C16.21,19.8 16.21,20.43 15.82,20.82C15.43,21.21 14.8,21.21 14.41,20.82L12,18.41L9.59,20.82C9.2,21.21 8.57,21.21 8.18,20.82C7.79,20.43 7.79,19.8 8.18,19.41L11.29,16.3C11.5,16.1 11.74,16 12,16C12.26,16 12.5,16.1 12.71,16.3Z\" />\n              </svg>\n              <span>{this.state.sunrise}</span>\n            </div>\n    \n            <div className=\"weather-item\">\n              <svg className=\"sun-icon\" viewBox=\"0 0 24 24\">\n                <path fill=\"black\" d=\"M3,12H7A5,5 0 0,1 12,7A5,5 0 0,1 17,12H21A1,1 0 0,1 22,13A1,1 0 0,1 21,14H3A1,1 0 0,1 2,13A1,1 0 0,1 3,12M15,12A3,3 0 0,0 12,9A3,3 0 0,0 9,12H15M12,2L14.39,5.42C13.65,5.15 12.84,5 12,5C11.16,5 10.35,5.15 9.61,5.42L12,2M3.34,7L7.5,6.65C6.9,7.16 6.36,7.78 5.94,8.5C5.5,9.24 5.25,10 5.11,10.79L3.34,7M20.65,7L18.88,10.79C18.74,10 18.47,9.23 18.05,8.5C17.63,7.78 17.1,7.15 16.5,6.64L20.65,7M12.71,20.71L15.82,17.6C16.21,17.21 16.21,16.57 15.82,16.18C15.43,15.79 14.8,15.79 14.41,16.18L12,18.59L9.59,16.18C9.2,15.79 8.57,15.79 8.18,16.18C7.79,16.57 7.79,17.21 8.18,17.6L11.29,20.71C11.5,20.9 11.74,21 12,21C12.26,21 12.5,20.9 12.71,20.71Z\" />\n              </svg>\n              <span>{this.state.sunset}</span>\n            </div>\n          </div>\n                  \n\n        </div>\n      );      \n    }\n    else {\n      return (\n        <div>Loading...</div>\n      )\n    }    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}