{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","lat","undefined","lon","city","temperatureC","temperatureF","icon","sunrise","sunset","errorMessage","getPosition","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","alert","getWeather","_callee","latitude","longitude","api_call","data","regenerator_default","a","wrap","_context","prev","next","fetch","concat","process","REACT_APP_WEATHER_API_KEY","sent","json","_this","setState","name","Math","round","main","temp","weather","moment","unix","sys","format","stop","_this2","this","then","position","coords","catch","err","message","timerID","setInterval","clearInterval","_this$state","react_default","createElement","className","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba43f1d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment';\n\nclass App extends Component {\n  state = {\n    lat: undefined,\n    lon: undefined,  \n    city: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    icon: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    errorMessage: undefined,\n  }\n\n  componentDidMount() {\n      //get coordinates\n      this.getPosition()\n      //then use coordinates to get weather data\n      .then((position) => {      \n        this.getWeather(position.coords.latitude, position.coords.longitude)\n      })\n      .catch((err) => {\n        this.setState({ errorMessage: err.message });\n      });\n\n      //this part is not necessary, it is here to automatically update our weather data every 5 minutes (300000 milliseconds)\n      this.timerID = setInterval(        \n        () => \n        this.getWeather(this.state.lat, this.state.lon),\n        60000\n      );\n  }\n\n  //function to get coordinates\n  getPosition = () => {\n    if (navigator.geolocation) {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    }\n    else {\n      alert(\"Geolocation not available\");      \n    }\n  }\n  \n  //function to get weather if you have the coordinates\n  getWeather = async (latitude, longitude) => { \n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`);\n    const data = await api_call.json();\n    \n    this.setState({\n      lat: latitude,\n      lon: longitude,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      icon: data.weather[0].icon,\n      sunrise: moment.unix(data.sys.sunrise).format(\"hh:mm a\"),\n      sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\"),\n    })\n\n  }\n\n  //shut down auto updating if you will close this page and move on to another page in your app\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    \n    const { city, temperatureC, temperatureF, icon, sunrise, sunset} = this.state;\n\n    if (city) {\n      return (\n        <div className=\"App\">\n  \n          <div className=\"weather-box\">\n            <div className=\"weather-item\">{city}</div>  \n    \n            <div className=\"weather-item\">{temperatureC} &deg;C</div>\n    \n            <div className=\"weather-item\">{temperatureF} &deg;F</div>\n    \n            <div>\n              <img className=\"weather-icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather icon\"/>\n            </div>\n            \n    \n            <div className=\"weather-item\">\n              <span>sunrise: {sunrise}</span>\n            </div>\n    \n            <div className=\"weather-item\">\n              <span>sunset: {sunset}</span>\n            </div>\n          </div>\n                  \n\n        </div>\n      );      \n    }\n    else {\n      return (\n        <div>Loading...</div>\n      )\n    }    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}